This is the controls system pseudocode that will implement the rolling blackout sequence.
This code will only run when we are in an emergency state, it's purpose is to leave that 
state as soon as possible. It will be given information from a Machine Learning Algorithm
that will tell it the accuracy of it's decisions by changing the Estimated Supply and 
Estimated Demand inputs.
Inputs: Current Demand - MWh                                            --> CD

        Estimated Demand Mean - MWh                                     --> EDM
		Estimated Demand Standard Deviation - MWh						--> EDS
																		--> ED (High Level View)
		
        *Both demands will be received as demand per cluster, so the control code
        will know how much each cluster is demanding, will need later
        Current Supply - MWh                                            --> CS
            - divided into supply by renewable and supply by storage
			
        Estimated Supply Mean - MWh                                     --> ESM
		Estimated Supply Standard Deviation - MWh						--> ESS
            - only supply by renewable
																		--> ES (High Level View)
			
        Building Cluster Priorities per building - [1,3]                --> BCP
            - 1: Buildings that must always be powered (ex. hospitals)
            - 2: Buildings that require more power but can lose it (ex. residential areas)
            - 3: Buildings that are not critical for needing power (ex. FAC, union, etc.)
Outputs: 
        Building Cluster Power Status for next time period (1hr is max length of typical rolling blackouts)
            -ex. n bit long byte array that shows which building clusters will have
            power.
        Whether to send power to storage devices

Higher level possibilities to consider:
1) If CD < CS & ED < ES, leave rolling blackout response state (go to normal operation). 
2) If CD < CS & ED > ES, send power to storage device and run rolling blackout code.
//Shouldn't get here since we should have predicted it or the hardware should have sensed it.
3) If CD > CS, run rolling blackout code. 

******************************************
To be honest, this is just a way I thought this would make sense. I feel like there is a
more standardized way of doing this and that there are lots of scenarios we are not accounting
for by just constantly changing which building get power. I'm also not sure if this is even 
utilizing our entire ML side properly.
******************************************
All clusters with lower priority will be divided into sections. The higher the priority, 
the longer each section gets to keep power (i.e. Priority 2 will have 20 min. rolling blackouts
while Priority 3 could have 10 min. rolling blackouts)

Define system reliability here. A lower reliability means being able to transmit more power.
A higher reliability means being more certain that CS never deeps below CD.

typedef struct state = {
    state nextState;
    state prevState;
    int buildingOn; (between 0 and n)
}

Rolling Blackout Code:
while(1){
    //Using HLSM since FSM will not take previous inputs into account
    int cs2 = 0, ns2 = 0; //current and next state of rolling blackouts for priority 2 buildings starts at 0
    int cs3 = 0, ns3 = 0; //same for buildings of priority 3
    int timeP2 = 0, timeP3 = 0;
	
	//If we implement this in python, we have access to the inverse error function to help us derive what values we can and cant work with. Look up "probit function" on wikipedia
	unnormLowerBound = sqrt(2)*inverf(-sysrel)
	//This tells us how many standard deviations below ED and ES mean we need to consider our "ceiling" to be sufficiently reliable.
	
	EDCap = EDM - unnormLowerBound*EDS
	ESCap = ESM - unnormLowerBound*ESS
	
    int remainingpwr = ESM - EDM //remaining power is what is left after all high priority buildings are given power
    //need to consider power only going to priority 3 if there isn't enough for any priority 2 buildings
    if (timeP2 == 20){
        cs2 = ns2.nextState; //go to next state
        if ((remainingpwr - ED[cs2.buildingOn]) < 0) {
            cs2 = cs2.prevState; //go back 1 state
            no building in priority 2 gets power (bit mask maybe)
        }
        else {
            remainingpwr = remainingpwr - ED[cs2.buildingOn]
            buildingOn gets set high in output bit array (bit or)
        }
    }
    if (timeP3 == 10){
        cs3 = ns3.nextState; //go to next state
        if ((remainingpwr - ED[cs3.buildingOn]) < 0) {
            cs3 = cs3.prevState; //go back 1 state
            no building in priority 3 gets power (bit mask maybe)
        }
        else {
            remainingpwr = remainingpwr - ED[cs3.buildingOn]
            buildingOn gets set high in output bit array (bit or)
        }
    }
    if (remainingpwr) power goes to storage
}
